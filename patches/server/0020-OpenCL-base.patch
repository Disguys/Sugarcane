From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Sat, 9 Jan 2021 12:18:51 +0800
Subject: [PATCH] OpenCL base


diff --git a/build.gradle.kts b/build.gradle.kts
index 9e09265b2f777fa66e2e85a9791a363ec87e7602..a7df4e1d3e83ae2a371b0398c9df3fbe1373836f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -70,6 +70,9 @@ dependencies {
     implementation("com.github.technove:AIR:fe3dbb4420") // Airplane - config
     implementation("com.github.technove:Flare:master-SNAPSHOT") // Airplane - flare
 
+    implementation("org.jogamp.gluegen:gluegen-rt-main:2.3.2") // Sugarcane - OpenCL acceleration
+    implementation("org.jogamp.jocl:jocl-main:2.3.2") // Sugarcane - OpenCL acceleration
+
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e8dc7f21c709ecc70050e863cf91b6adca5d871e..e6cd2a7550bd0d3bbe00259d1be4220ca12ae95e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1085,6 +1085,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         LOGGER.info("Closing Thread Pool");
         Util.shutdownExecutors(); // Paper
         LOGGER.info("Closing Server");
+        org.sugarcanemc.sugarcane.server.util.hwaccel.opencl.OpenCompute.release(); // Sugarcane
         try {
             net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
         } catch (Exception e) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b7b026aa7309435d0c18dabc90981f99ac3b75a8..8cd57eed94f43668188f0c5c85e7eec88498c4ad 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -217,6 +217,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             DedicatedServer.LOGGER.error("Unable to load server configuration", e);
             return false;
         }
+        org.sugarcanemc.sugarcane.server.util.hwaccel.opencl.OpenCompute.init(); // Sugarcane
         org.sugarcanemc.sugarcane.server.SugarcaneConfig.registerCommands(); // Sugarcane
         com.destroystokyo.paper.PaperConfig.registerCommands();
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/server/SugarcaneConfig.java
index dbfb8053177f9a086395e981c6c1c10015cd8840..c91848b8844781ca4085f30360a6848f786cd12d 100644
--- a/src/main/java/org/sugarcanemc/sugarcane/server/SugarcaneConfig.java
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/SugarcaneConfig.java
@@ -185,6 +185,16 @@ public class SugarcaneConfig {
 		return config.getString(path, config.getString(path));
 }
 
+public static boolean useOpenCL = true;
+public static int openCLDeviceOverride = -1;
+public static int openCLTestSize = 8 * 1024 * 1024;
+public static int openCLTestPasses = 4;
+	private static void opencl() {
+		useOpenCL = getBoolean("settings.opencl.enabled", useOpenCL);
+		openCLDeviceOverride = getInt("settings.opencl.device-override", openCLDeviceOverride);
+		openCLTestSize = getInt("settings.opencl.test-size", openCLTestSize);
+		openCLTestPasses = getInt("settings.opencl.test-passes", openCLTestPasses);
+	}
 public static boolean logPlayerLoginLoc = true;
 	private static void general() {
 		logPlayerLoginLoc = getBoolean("settings.log-player-login-location", logPlayerLoginLoc);
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicCPUBenchmark.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicCPUBenchmark.java
new file mode 100644
index 0000000000000000000000000000000000000000..eaa6076f6e114f3af0b912a6686dae4efa564402
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicCPUBenchmark.java
@@ -0,0 +1,67 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.sugarcanemc.sugarcane.server.SugarcaneConfig;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.CompletableFuture;
+
+public class BasicCPUBenchmark {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private static final int WORK_SIZE = SugarcaneConfig.openCLTestSize;
+
+    public static CompletableFuture<CPUBenchmarkResult> benchmark() {
+        CompletableFuture<CPUBenchmarkResult> future = new CompletableFuture<>();
+        OpenCompute.OPENCL_EXECUTOR.execute(() -> {
+            List<Long> timingList = new ArrayList<>();
+            final long[] testData1 = new long[WORK_SIZE];
+            final long[] testData2 = new long[WORK_SIZE];
+            long[] result = new long[WORK_SIZE];
+            try {
+                long lastTime = Long.MAX_VALUE;
+                long thisTime = Long.MIN_VALUE;
+                int times = 0;
+                int totalTimes = 0;
+                while ((Math.abs((lastTime - thisTime) / 1_000_000) >= 2 || times++ < 5) && totalTimes < 96) {
+                    if (Math.abs((lastTime - thisTime) / 1_000_000) >= 2)
+                        times = 0;
+                    lastTime = thisTime;
+                    long startTime = System.nanoTime();
+                    run0(testData1, testData2, result);
+                    thisTime = System.nanoTime() - startTime;
+                    totalTimes++;
+                }
+                if (totalTimes == 96)
+                    LOGGER.warn("Reached warmup timeout");
+
+                for (int i = 0; i < SugarcaneConfig.openCLTestPasses; i++) {
+                    long duration = run0(testData1, testData2, result);
+                    timingList.add(duration);
+                }
+                future.complete(new CPUBenchmarkResult(timingList));
+            } catch (Throwable t) {
+                future.completeExceptionally(t);
+            }
+        });
+
+        return future;
+    }
+
+    private static long run0(long[] testData1, long[] testData2, long[] result) {
+        Random random = new Random();
+        for (int h = 0; h < WORK_SIZE; h++) {
+            testData1[h] = random.nextLong();
+            testData2[h] = random.nextLong();
+        }
+        long startTime = System.nanoTime();
+        for (int h = 0; h < WORK_SIZE; h++) {
+            result[h] = (((testData1[h] * h) << 2) + (testData2[h] % 2) / (h + 1) + (h >> 2) / ((h + 1) << 4));
+        }
+        return System.nanoTime() - startTime;
+    }
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicOpenCLBenchmark.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicOpenCLBenchmark.java
new file mode 100644
index 0000000000000000000000000000000000000000..badb52e381627ba6ad567ad99cbc1d792da01a85
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BasicOpenCLBenchmark.java
@@ -0,0 +1,107 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import com.jogamp.opencl.CLBuffer;
+import com.jogamp.opencl.CLCommandQueue;
+import com.jogamp.opencl.CLEventList;
+import com.jogamp.opencl.CLKernel;
+import com.jogamp.opencl.CLProgram;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.sugarcanemc.sugarcane.server.SugarcaneConfig;
+
+import java.nio.LongBuffer;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.CompletableFuture;
+
+import static com.jogamp.opencl.CLEvent.ProfilingCommand.END;
+import static com.jogamp.opencl.CLEvent.ProfilingCommand.START;
+
+public class BasicOpenCLBenchmark {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private static final int WORK_SIZE = SugarcaneConfig.openCLTestSize;
+
+
+    public static CompletableFuture<OpenCLBenchmarkResult> benchmark(OpenCompute openCompute) {
+        CompletableFuture<OpenCLBenchmarkResult> future = new CompletableFuture<>();
+        List<Long> gpuTimingList = new ArrayList<>();
+        List<Long> cpuTimingList = new ArrayList<>();
+        List<Long> latencyTimingList = new ArrayList<>();
+        @SuppressWarnings("unchecked") final CLBuffer<LongBuffer>[] longBuffer1 = new CLBuffer[]{null};
+        @SuppressWarnings("unchecked") final CLBuffer<LongBuffer>[] longBuffer2 = new CLBuffer[]{null};
+        @SuppressWarnings("unchecked") final CLBuffer<LongBuffer>[] longBuffer3 = new CLBuffer[]{null};
+        try {
+            OpenCompute.OPENCL_EXECUTOR.execute(() -> {
+                try {
+                    final long[] testData1 = new long[WORK_SIZE];
+                    final long[] testData2 = new long[WORK_SIZE];
+                    CLProgram program = openCompute.getProgram("SpeedTest.cl");
+                    for (int i = 0; i < SugarcaneConfig.openCLTestPasses; i++) {
+                        Random random = new Random();
+                        for (int h = 0; h < WORK_SIZE; h++) {
+                            testData1[h] = random.nextLong();
+                            testData2[h] = random.nextLong();
+                        }
+                        CLKernel kernel = null;
+                        CLEventList events = null;
+                        try {
+                            if (longBuffer1[0] == null) {
+                                longBuffer1[0] = openCompute.getContext().createLongBuffer(WORK_SIZE);
+                            } else {
+                                longBuffer1[0].getBuffer().clear();
+                            }
+                            if (longBuffer2[0] == null) {
+                                longBuffer2[0] = openCompute.getContext().createLongBuffer(WORK_SIZE);
+                            } else {
+                                longBuffer2[0].getBuffer().clear();
+                            }
+                            if (longBuffer3[0] == null) {
+                                longBuffer3[0] = openCompute.getContext().createLongBuffer(WORK_SIZE);
+                            } else {
+                                longBuffer3[0].getBuffer().clear();
+                            }
+                            long startTime = System.nanoTime();
+                            longBuffer1[0].getBuffer().put(testData1);
+                            longBuffer2[0].getBuffer().put(testData2);
+                            kernel = openCompute.getKernel(program, "test");
+                            kernel.putArg(longBuffer1[0])
+                                    .putArg(longBuffer2[0])
+                                    .putArg(longBuffer3[0]);
+                            CLCommandQueue clCommandQueue = openCompute.getQueue();
+                            events = new CLEventList(null, 1);
+                            clCommandQueue
+                                    .put1DRangeKernel(kernel, 0, openCompute.getGlobalSize(WORK_SIZE), openCompute.getLocalSize(), events)
+                                    .putReadBuffer(longBuffer3[0], true)
+                                    .putWaitForEvents(events, true);
+
+                            long gpuTiming = events.getEvent(0).getProfilingInfo(END) - events.getEvent(0).getProfilingInfo(START);
+                            long cpuTiming = System.nanoTime() - startTime;
+                            long latencyTiming = cpuTiming - gpuTiming;
+                            gpuTimingList.add(gpuTiming);
+                            cpuTimingList.add(cpuTiming);
+                            latencyTimingList.add(latencyTiming);
+                        } finally {
+                            if (kernel != null && !kernel.isReleased()) kernel.release();
+                            if (events != null && !events.isReleased()) events.release();
+                        }
+                    }
+                    future.complete(new OpenCLBenchmarkResult(gpuTimingList, cpuTimingList, latencyTimingList, openCompute));
+                } catch (Throwable t) {
+                    future.completeExceptionally(t);
+                }
+            });
+        } catch (Throwable t) {
+            future.completeExceptionally(t);
+        } finally {
+            if (longBuffer1[0] != null && !longBuffer1[0].isReleased()) longBuffer1[0].release();
+            if (longBuffer2[0] != null && !longBuffer2[0].isReleased()) longBuffer2[0].release();
+            if (longBuffer3[0] != null && !longBuffer3[0].isReleased()) longBuffer3[0].release();
+        }
+
+        return future;
+    }
+
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BenchmarkResult.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BenchmarkResult.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d5c01d29499a33055f9f4b58a115fb9c8b8d697
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/BenchmarkResult.java
@@ -0,0 +1,16 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import java.util.List;
+
+public class BenchmarkResult {
+    long CalculateAverage(List<Long> list) {
+        long sum = 0;
+        if (!list.isEmpty()) {
+            for (int i = 0; i < list.size(); i++) {
+                sum += list.get(i);
+            }
+            return sum / list.size();
+        }
+        return sum;
+    }
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/CPUBenchmarkResult.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/CPUBenchmarkResult.java
new file mode 100644
index 0000000000000000000000000000000000000000..2df9c13561d5265696456fae4b3c86accaaa1add
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/CPUBenchmarkResult.java
@@ -0,0 +1,16 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import java.util.List;
+
+public class CPUBenchmarkResult extends BenchmarkResult{
+    private final long timing;
+
+    CPUBenchmarkResult(List<Long> timing) {
+        this.timing = CalculateAverage(timing);
+    }
+
+    public long getTiming() {
+        return timing;
+    }
+
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCLBenchmarkResult.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCLBenchmarkResult.java
new file mode 100644
index 0000000000000000000000000000000000000000..28d2405f8e502f0f561351e13f5b4c6a301c7f34
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCLBenchmarkResult.java
@@ -0,0 +1,30 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import java.util.List;
+
+public class OpenCLBenchmarkResult extends BenchmarkResult{
+    private final long gpuTiming;
+    private final long cpuTiming;
+    private final long latencyTiming;
+    public final OpenCompute openCompute;
+
+    OpenCLBenchmarkResult(List<Long> gpuTiming, List<Long> cpuTiming, List<Long> latencyTiming, OpenCompute openCompute) {
+        this.gpuTiming = CalculateAverage(gpuTiming);
+        this.cpuTiming = CalculateAverage(cpuTiming);
+        this.latencyTiming = CalculateAverage(latencyTiming);
+        this.openCompute = openCompute;
+    }
+
+    public long getGpuTiming() {
+            return gpuTiming;
+        }
+
+    public long getCpuTiming() {
+            return cpuTiming;
+        }
+
+    public long getLatencyTiming() {
+            return latencyTiming;
+        }
+
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCompute.java b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCompute.java
new file mode 100644
index 0000000000000000000000000000000000000000..2660713c04226825e744a8869635dffe713a510a
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenCompute.java
@@ -0,0 +1,327 @@
+/*
+ * Glowstone Copyright (C) 2015-2020 The Glowstone Project.
+ * Glowstone Copyright (C) 2011-2014 Tad Hardesty.
+ * Lightstone Copyright (C) 2010-2011 Graham Edgecombe.
+ */
+
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import com.google.common.base.Preconditions;
+import com.jogamp.opencl.CLCommandQueue;
+import com.jogamp.opencl.CLContext;
+import com.jogamp.opencl.CLDevice;
+import com.jogamp.opencl.CLKernel;
+import com.jogamp.opencl.CLPlatform;
+import com.jogamp.opencl.CLProgram;
+import com.jogamp.opencl.llb.impl.CLAbstractImpl;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.sugarcanemc.sugarcane.server.SugarcaneConfig;
+
+import javax.annotation.Nonnull;
+import java.io.Closeable;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.stream.Collectors;
+
+public class OpenCompute implements Closeable {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final ClassLoader CLASS_LOADER = OpenCompute.class.getClassLoader();
+    static final ExecutorService OPENCL_EXECUTOR = Executors.newCachedThreadPool(new ThreadFactory() {
+        private final AtomicLong serial = new AtomicLong(0);
+
+        @Override
+        public Thread newThread(@Nonnull Runnable r) {
+            Thread thread = new Thread(r);
+            thread.setName("YatopiaCL-" + serial.getAndIncrement());
+            thread.setPriority(Thread.NORM_PRIORITY - 1);
+            thread.setDaemon(true);
+            return thread;
+        }
+    });
+
+    private final CLPlatform platform;
+    private final CLContext context;
+    private final CLDevice device;
+    private final CLCommandQueue queue;
+    private ConcurrentHashMap<String, CLProgram> programs;
+
+    private static OpenCompute activeInstance = null;
+
+    public static OpenCompute getActiveInstance() {
+        return activeInstance;
+    }
+
+    public static synchronized void release() {
+        if (activeInstance == null) return;
+        LOGGER.info("Yatopia OpenCL: Shutting down");
+        activeInstance.close();
+        activeInstance = null;
+    }
+
+    public CLPlatform getPlatform() {
+        return platform;
+    }
+
+    public CLContext getContext() {
+        return context;
+    }
+
+    public CLDevice getDevice() {
+        return device;
+    }
+
+    public CLCommandQueue getQueue() {
+        return queue;
+    }
+
+    /**
+     * Initializes the {@link CLContext}, {@link CLDevice} and {@link CLCommandQueue} for the given
+     * {@link CLPlatform}.
+     *
+     * @param device the {@link CLDevice} to use
+     */
+    private OpenCompute(CLDevice device) {
+        this(device, false);
+    }
+
+    private OpenCompute(CLDevice device, boolean profilingEnabled) {
+        Preconditions.checkNotNull(device);
+        try {
+            this.programs = new ConcurrentHashMap<>();
+            this.platform = device.getPlatform();
+            this.device = device;
+            this.context = CLContext.create(this.device);
+            if (profilingEnabled)
+                this.queue = this.device.createCommandQueue(CLCommandQueue.Mode.PROFILING_MODE, CLCommandQueue.Mode.OUT_OF_ORDER_MODE);
+            else
+                this.queue = this.device.createCommandQueue(CLCommandQueue.Mode.OUT_OF_ORDER_MODE);
+        } catch (Exception e) {
+            throw new IllegalArgumentException(String.format("Failed to initialize %s", device.getName()), e);
+        }
+        Preconditions.checkState(this.programs != null);
+        Preconditions.checkState(this.platform != null);
+        Preconditions.checkState(this.queue != null);
+
+    }
+
+    /**
+     * Returns an OpenCL program, loading it synchronously if it's not in cache.
+     *
+     * @param name the program filename
+     * @return the OpenCL program, or null if there isn't a valid program with that name
+     */
+    public CLProgram getProgram(String name) {
+        if (programs.containsKey(name)) {
+            return programs.get(name);
+        } else {
+            if (programs.containsKey(name))
+                return programs.get(name);
+            synchronized (this) {
+                if (programs.containsKey(name))
+                    return programs.get(name);
+                long startTime = System.nanoTime();
+                try (InputStream input = CLASS_LOADER
+                        .getResourceAsStream("org/yatopiamc/hwaccel/opencl/programs/" + name)) {
+                    CLProgram program = context.createProgram(input).build();
+                    programs.put(name, program);
+                    LOGGER.info("OpenCL program [{}] compiled in {}ms", name, (System.nanoTime() - startTime) / 1_000_000);
+                    return program;
+                } catch (Throwable ex) {
+                    LOGGER.log(Level.WARN,
+                            String.format("Could not load builtin OpenCL program after %sms", (System.nanoTime() - startTime) / 1_000_000), ex);
+                    throw new RuntimeException(ex);
+                }
+            }
+        }
+    }
+
+    public CLKernel getKernel(CLProgram program, String name) {
+        return program.createCLKernel(name);
+    }
+
+    /**
+     * Initializes OpenCompute API with settings defined in yatopia.yml
+     */
+    public static synchronized void init() {
+        if (SugarcaneConfig.useOpenCL) {
+            try {
+                LOGGER.info("Initializing OpenCL...");
+                if (!CLAbstractImpl.isAvailable()) {
+                    LOGGER.warn("Your system does not meet the OpenCL requirements for Yatopia OpenCL Acceleration. " +
+                            "See if driver updates are available.");
+                    return;
+                }
+
+                CLPlatform[] platforms = CLPlatform.listCLPlatforms();
+                LOGGER.debug(String.format("Found %d platforms", platforms.length));
+                List<CLDevice> devices = new ArrayList<>();
+                List<CompletableFuture<OpenCLBenchmarkResult>> deviceBenchmarks = new ArrayList<>();
+                for (int i = 0; i < platforms.length; i++) {
+                    CLPlatform platform = platforms[i];
+                    LOGGER.debug("Platform {}: Vendor string: {} ", i, platform.getVendor());
+                    LOGGER.debug("Platform {}: Profile string: {}", i, platform.getProfile());
+                    LOGGER.debug("Platform {}: Version string: {} ", i, platform.getVersion());
+                    LOGGER.debug("Platform {}: Name string: {} ", i, platform.getName());
+                    LOGGER.debug("Platform {}: Available extensions: {} ", i, platform.getExtensions());
+                    CLDevice[] platformDevices = platform.listCLDevices();
+                    devices.addAll(Arrays.stream(platformDevices).filter(device -> device.isCompilerAvailable() && device.isDoubleFPAvailable()).collect(Collectors.toSet()));
+                }
+
+                LOGGER.info("Found {} devices", devices.size());
+                if (devices.isEmpty()) {
+                    LOGGER.warn("Your system does not meet the OpenCL requirements for Yatopia OpenCL Acceleration. " +
+                            "See if driver updates are available.");
+                    return;
+                }
+
+                for (int i = 0, deviceCount = devices.size(); i < deviceCount; i++) {
+                    CLDevice device = devices.get(i);
+                    CLPlatform platform = device.getPlatform();
+                    int platformID = -1;
+                    for (int j = 0; j < platforms.length; j++)
+                        if (platforms[j] == platform) {
+                            platformID = j;
+                            break;
+                        }
+                    LOGGER.info("Device {}: {} ", i, device.getName());
+                    LOGGER.debug("Device {} of Platform {}: Version string: {} ", i, platformID, device.getVersion());
+                    LOGGER.debug("Device {} of Platform {}: C-Version string: {} ", i, platformID, device.getCVersion());
+                    LOGGER.debug("Device {} of Platform {}: Driver version string: {} ", i, platformID, device.getDriverVersion());
+                    LOGGER.debug("Device {} of Platform {}: Profile string: {} ", i, platformID, device.getProfile());
+                    LOGGER.debug("Device {} of Platform {}: Device type: {} ", i, platformID, device.getType());
+                    LOGGER.debug("Device {} of Platform {}: Available extensions: {}", i, platformID, device.getExtensions());
+                    LOGGER.debug("Device {} of Platform {}: Execution capabilities: {}", i, platformID, device.getExecutionCapabilities());
+                }
+
+                if (SugarcaneConfig.openCLDeviceOverride < -1 || SugarcaneConfig.openCLDeviceOverride >= devices.size()) {
+                    LOGGER.warn("Invalid override in configuration, ignoring");
+                    SugarcaneConfig.openCLDeviceOverride = -1;
+                }
+                if (SugarcaneConfig.openCLDeviceOverride != -1) {
+                    LOGGER.info("Overrides detected, using device {}", SugarcaneConfig.openCLDeviceOverride);
+                    activeInstance = new OpenCompute(devices.get(SugarcaneConfig.openCLDeviceOverride));
+                } else {
+                    LOGGER.info("No overrides defined, sorting devices by benchmark results...");
+                    for (CLDevice device : devices) {
+                        OpenCompute openCompute;
+                        try {
+                            openCompute = new OpenCompute(device, true);
+                        } catch (Throwable t) {
+                            LOGGER.warn("Failed to initialize {}", device, t);
+                            continue;
+                        }
+                        deviceBenchmarks.add(BasicOpenCLBenchmark.benchmark(openCompute).handle((openCLBenchmarkResult, throwable) -> {
+                            if (throwable != null)
+                                LOGGER.info("A device failed to benchmark, device information unavailable", throwable);
+                            openCompute.close();
+                            return openCLBenchmarkResult;
+                        }));
+                    }
+
+                    deviceBenchmarks.sort((o1, o2) -> {
+                        OpenCLBenchmarkResult openCLBenchmarkResult1 = o1.join();
+                        OpenCLBenchmarkResult openCLBenchmarkResult2 = o2.join();
+                        int gpuTimingCompare = Long.compare(openCLBenchmarkResult1.getGpuTiming(), openCLBenchmarkResult2.getGpuTiming());
+                        int cpuTimingCompare = Long.compare(openCLBenchmarkResult1.getCpuTiming(), openCLBenchmarkResult2.getCpuTiming());
+                        if (gpuTimingCompare != 0) return gpuTimingCompare;
+                        else return cpuTimingCompare;
+                    });
+                    deviceBenchmarks.removeIf(future -> future.join() == null);
+
+                    if (deviceBenchmarks.isEmpty()) {
+                        LOGGER.warn("Your system does not meet the OpenCL requirements for Yatopia OpenCL Acceleration. " +
+                                "See if driver updates are available.");
+                        return;
+                    }
+
+                    LOGGER.info("Benchmark results: ");
+                    for (int i = 0, size = deviceBenchmarks.size(); i < size; i++) {
+                        OpenCLBenchmarkResult openCLBenchmarkResult = deviceBenchmarks.get(i).join();
+                        LOGGER.info("{}: {}ms compute time, {}ms round trip, {}ms latency",
+                                openCLBenchmarkResult.openCompute.getDevice().getName(), openCLBenchmarkResult.getGpuTiming() / 1_000_000.0, openCLBenchmarkResult.getCpuTiming() / 1_000_000.0,
+                                openCLBenchmarkResult.getLatencyTiming() / 1_000_000.0);
+                        LOGGER.debug("{}: CLPlatform {} on device CLDevice {}",
+                                openCLBenchmarkResult.openCompute.getDevice().getName(), openCLBenchmarkResult.openCompute.getPlatform(), openCLBenchmarkResult.openCompute.getDevice());
+                    }
+
+                    OpenCLBenchmarkResult fastestdeivce = deviceBenchmarks.get(0).join();
+                    CLDevice device = fastestdeivce.openCompute.device;
+                    LOGGER.info("OpenCL: Using {}", device.getName());
+                    LOGGER.debug("OpenCL: Using CLPlatform {} on device CLDevice {}", device.getPlatform(), device);
+                    activeInstance = new OpenCompute(device);
+                }
+            } catch (Throwable t) {
+                LOGGER.warn("Some error occurred when initializing OpenCL", t);
+                LOGGER.warn("Your system does not meet the OpenCL requirements for Yatopia OpenCL Acceleration. " +
+                        "See if driver updates are available.");
+            }
+        }
+    }
+
+    /**
+     * Calculates the number of work groups.
+     *
+     * @param size the total number of local work units
+     * @return the number of work groups
+     */
+    public int getGlobalSize(int size) {
+        return getGlobalSize(size, getLocalSize());
+    }
+
+    /**
+     * Calculates the number of work groups.
+     *
+     * @param size          the total number of local work units
+     * @param localWorkSize the number of local work units per work group
+     * @return the number of work groups
+     */
+    private static int getGlobalSize(int size, int localWorkSize) {
+        int globalSize = size;
+        int r = globalSize % localWorkSize;
+        if (r != 0) {
+            globalSize += localWorkSize - r;
+        }
+        return globalSize;
+    }
+
+    /**
+     * Calculates the number of local work units per work group.
+     *
+     * @return the size of the work groups
+     */
+    public int getLocalSize() {
+        return Math.min(device.getMaxWorkGroupSize(), 256);
+    }
+
+    /**
+     * Calculates the number of local work units per work group, applying a specified maximum.
+     *
+     * @param max the maximum size allowed
+     * @return the size of the work groups
+     */
+    public int getLocalSize(int max) {
+        return Math.min(device.getMaxWorkGroupSize(), max);
+    }
+
+    /**
+     * Static de-initializer. Clears all references to {@link CLProgram}, {@link CLKernel} and
+     * {@link CLContext} instances.
+     */
+    @Override
+    public synchronized void close() {
+        programs.clear();
+        programs = null;
+        context.release();
+    }
+}
diff --git a/src/main/resources/org/yatopiamc/hwaccel/opencl/programs/SpeedTest.cl b/src/main/resources/org/yatopiamc/hwaccel/opencl/programs/SpeedTest.cl
new file mode 100644
index 0000000000000000000000000000000000000000..f3deb06b5b51efbce68a450e58e4ad0359934023
--- /dev/null
+++ b/src/main/resources/org/yatopiamc/hwaccel/opencl/programs/SpeedTest.cl
@@ -0,0 +1,8 @@
+__kernel void test(__global const long *o1, __global const long *o2,
+                   __global long *result) {
+  int current = get_global_id(0);
+
+  result[current] = ((o1[current] * current) << 2) +
+                    (o2[current] % 2) / (current + 1) +
+                    (current >> 2) / ((current + 1) << 4);
+}
diff --git a/src/test/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenComputeTest.java b/src/test/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenComputeTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..2242245730e24f1ab8d62a9299fe1a0549ce79f2
--- /dev/null
+++ b/src/test/java/org/sugarcanemc/sugarcane/server/util/hwaccel/opencl/OpenComputeTest.java
@@ -0,0 +1,26 @@
+package org.sugarcanemc.sugarcane.server.util.hwaccel.opencl;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+public class OpenComputeTest {
+
+    @Before
+    public void initializeOpenCL() {
+        OpenCompute.init();
+        if(OpenCompute.getActiveInstance() == null)
+            System.out.println("[WARN] OpenCL service not started");
+    }
+
+    @Test
+    public void placeholder() {
+
+    }
+
+    @After
+    public void closeOpenCL() {
+        OpenCompute.release();
+    }
+
+}
